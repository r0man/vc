{"id":"vc-196","title":"Implement pre-flight quality gates to prevent work on broken baseline","description":"","design":"Pre-Flight Quality Gates: Run gates BEFORE claiming work to verify baseline is CLEAN. Cache results by git commit hash for performance (5 min TTL). Key innovation: Baseline cache means near-instant pre-flight for unchanged code. ALL failures block work - no 'pre-existing failure' excuses allowed. Agents must fix the baseline before claiming new work. Phase 1 (COMPLETE): Basic caching with commit hash. Phase 2 (future): Sandbox reuse for unchanged baselines.","acceptance_criteria":"Phase 1 MVP: PreFlightChecker with commit-based caching, degraded mode on pre-flight failure, database table vc_gate_baselines, cache hit rate \u003e90%, events logged, env var config, tests","notes":"Implemented preflight quality gates: database schema, PreFlightChecker component, configuration, degraded mode, executor integration, and tests","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-27T19:30:28.052464-07:00","updated_at":"2025-10-28T12:29:57.989964-07:00","closed_at":"2025-10-28T11:39:11.921936-07:00"}
{"id":"vc-202","title":"Documentation: PREFLIGHT.md explaining cache strategy","description":"","design":"Write PREFLIGHT.md explaining the preflight quality gates system. CRITICAL: Document why ALL baseline failures block work - no 'pre-existing failure' loophole. This prevents agents from disclaiming responsibility like insurance adjusters. If the baseline is broken, it MUST be fixed before claiming new work. Cover: commit-hash caching strategy, cache TTL, degraded mode, failure modes (block/warn/ignore), how to fix baseline failures, why we don't allow 'pre-existing' excuses.","acceptance_criteria":"PREFLIGHT.md created, explains architecture, examples provided, reviewed","notes":"Updated priority to P2 - documentation important to explain why ALL failures block (no pre-existing excuse loophole)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-27T19:32:59.537712-07:00","updated_at":"2025-10-28T12:30:26.123854-07:00","dependencies":[{"issue_id":"vc-202","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:33:10.180315-07:00","created_by":"stevey"}]}
{"id":"vc-207","title":"Phase 2: Sandbox reuse for unchanged baselines","description":"Reuse sandboxes when baseline hasn't changed (same commit hash). Currently we create a new sandbox for each execution. If preflight shows baseline is clean and unchanged (cache hit), we could reuse the existing sandbox/worktree from previous execution. Saves time on git operations and sandbox setup.","design":"Extend vc_gate_baselines table to track sandbox_path (already has column). When preflight check hits cache: 1) Check if sandbox still exists at cached path, 2) Verify sandbox is on correct commit, 3) If valid: reuse it, skip clone/worktree creation. Benefits: Faster execution start, less disk I/O, fewer git operations. Risks: Sandbox state pollution between executions. Mitigation: Verify clean working tree before reuse.","acceptance_criteria":"Sandbox reuse implemented, sandbox_path stored in baselines cache, validation checks before reuse, metrics on reuse rate, fallback to new sandbox if validation fails, tests","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-28T12:30:33.484199-07:00","updated_at":"2025-10-28T12:30:33.484199-07:00","dependencies":[{"issue_id":"vc-207","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-28T12:30:51.6771-07:00","created_by":"stevey"}]}
