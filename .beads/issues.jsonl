{"id":"vc-256","title":"Remove TOCTOU race condition in QualityGateWorker.ClaimReadyWork","description":"The ClaimReadyWork method has a redundant HasLabel check (lines 85-96) that creates a Time-of-Check-Time-of-Use race condition. The query GetMissionsNeedingGates already filters out missions with gates-running label, so this check is unnecessary and introduces a race window where another worker could claim between the check and the atomicClaim call.","acceptance_criteria":"Remove the HasLabel check in ClaimReadyWork loop. The atomicClaim method already handles race conditions properly by attempting to add the label and failing gracefully if another worker added it first. Add a test that verifies race condition handling with concurrent workers.","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-29T19:14:02.674033-07:00","updated_at":"2025-10-29T19:14:02.674033-07:00","dependencies":[{"issue_id":"vc-256","depends_on_id":"vc-252","type":"parent-child","created_at":"2025-10-29T19:15:30.743555-07:00","created_by":"stevey"}]}
{"id":"vc-257","title":"Fix non-atomic cleanup in QualityGateWorker.atomicClaim","description":"In atomicClaim (lines 132-133), if ClaimIssue fails, we unconditionally remove the gates-running label. But if another worker added the label (not us), we'll remove their lock\\! Race scenario: Worker A adds gates-running, Worker B adds gates-running (duplicate succeeds), Worker A claims successfully, Worker B's claim fails and removes Worker A's lock.","acceptance_criteria":"Only remove the gates-running label if we can verify we added it (check label actor). Or better: rely on execution state cleanup to handle orphaned labels (stale instance cleanup will remove the label when the instance is cleaned up). Add test for this race condition with two concurrent workers.","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-29T19:14:18.787368-07:00","updated_at":"2025-10-29T19:14:18.787368-07:00","dependencies":[{"issue_id":"vc-257","depends_on_id":"vc-252","type":"parent-child","created_at":"2025-10-29T19:15:35.830812-07:00","created_by":"stevey"}]}
{"id":"vc-258","title":"Add nil check for gatesRunner in QualityGateWorker.Execute","description":"In Execute method (line 211), we call gatesRunner.RunAll without checking if gatesRunner is nil. The constructor NewQualityGateWorker does not validate that gatesRunner is provided, so this will panic if Execute is called without a gates runner configured.","acceptance_criteria":"Add validation in NewQualityGateWorker to require gatesRunner (or make it optional with clear documentation). If optional, add nil check in Execute and return a clear error message. Add test that verifies behavior when gatesRunner is nil.","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-29T19:14:34.764218-07:00","updated_at":"2025-10-29T19:14:34.764218-07:00","dependencies":[{"issue_id":"vc-258","depends_on_id":"vc-252","type":"parent-child","created_at":"2025-10-29T19:15:40.912333-07:00","created_by":"stevey"}]}
{"id":"vc-259","title":"Standardize error handling in QualityGateWorker","description":"The QualityGateWorker has inconsistent error handling - some operations log warnings and continue (e.g., line 268 ReleaseIssue), others return errors (e.g., line 256 RemoveLabel). This makes it unclear which operations are critical vs best-effort. Need to document and standardize the error handling policy.","acceptance_criteria":"Document which operations are critical (should fail the execution) vs best-effort (can log warnings). Make error handling consistent across all methods. Consider: if removing gates-running label fails, the mission is stuck - should this emit an alert event? Update all error handling to match the documented policy.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-29T19:14:50.548604-07:00","updated_at":"2025-10-29T19:14:50.548604-07:00","dependencies":[{"issue_id":"vc-259","depends_on_id":"vc-252","type":"parent-child","created_at":"2025-10-29T19:15:45.996113-07:00","created_by":"stevey"}]}
{"id":"vc-260","title":"Fix comments and documentation in QualityGateWorker","description":"Several documentation issues in qa_worker.go: (1) Line 137 comment says 'Step 4' but should be 'Step 3' (numbering skips 3). (2) Line 1223 in methods.go comment says 'highest first' but ASC means lowest priority number first (P0 before P2). (3) Line 131 in qa_worker_test.go uses StatusClosed but should be StatusOpen for consistency.","acceptance_criteria":"Fix comment numbering to be sequential (1, 2, 3, 4). Update priority ordering comment to clarify P0 comes before P2 (ASC order). Fix test to use StatusOpen for consistency with other tests.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-29T19:15:04.902186-07:00","updated_at":"2025-10-29T19:15:04.902186-07:00","dependencies":[{"issue_id":"vc-260","depends_on_id":"vc-252","type":"parent-child","created_at":"2025-10-29T19:15:51.081752-07:00","created_by":"stevey"}]}
