{"id":"vc-1","title":"vc_agent_events table missing executor_id, agent_id, and source_line columns","description":"Database migration failure: vc_agent_events table is missing executor_id, agent_id, and source_line columns, causing executor startup to fail with 'no such column: executor_id' error.\n\nROOT CAUSE:\n- The schema definition in wrapper.go includes executor_id, agent_id, and source_line columns\n- But the actual vc_agent_events table in the database doesn't have these columns\n- The migration code in migrateAgentEventsTable() checks 'vc_agent_events' but the table exists without those columns\n\nERROR:\nfailed to open database: failed to create VC extension tables: failed to create VC extension schema: SQL logic error: no such column: executor_id (1)\n\nIMPACT:\n- Executor cannot start at all\n- Blocks all dogfooding runs\n\nFIXED: Split schema into table and index creation with migrations in between.","design":"Fix the migration code by:\n1. Create tables first\n2. Run migrations to add missing columns\n3. Create indexes last (after columns exist)","acceptance_criteria":"1. Executor starts successfully\n2. vc_agent_events table has all required columns\n3. Migration handles existing tables\n4. Existing data is preserved","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-23T22:09:01.367913-07:00","updated_at":"2025-10-23T22:09:06.72525-07:00","closed_at":"2025-10-23T22:09:06.72525-07:00"}
{"id":"vc-2","title":"GetEventCounts fails with 'converting NULL to string' error","description":"Event cleanup fails to get event counts with NULL conversion error.\n\nERROR:\nevent cleanup: warning: failed to get event counts: failed to scan severity count: sql: Scan error on column index 0, name \"severity\": converting NULL to string is unsupported\n\nROOT CAUSE:\nGetEventCounts() does GROUP BY on severity column which can be NULL in some events. When scanning the result into a string, SQL library refuses to convert NULL to string.\n\nIMPACT:\n- Event cleanup cannot run successfully\n- Cannot display event statistics\n\nFIXED: Use COALESCE(severity, 'unknown') in SQL query","design":"Use COALESCE(severity, 'unknown') to handle NULL severities in the GROUP BY query","acceptance_criteria":"1. GetEventCounts() succeeds even with NULL severities\n2. NULL severities are reported as 'unknown'\n3. Event cleanup can retrieve counts successfully","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:09:18.08033-07:00","updated_at":"2025-10-23T22:09:22.902741-07:00","closed_at":"2025-10-23T22:09:22.902741-07:00"}
{"id":"vc-3","title":"Event cleanup FK constraint failure when storing cleanup event","description":"Event cleanup goroutine fails to store cleanup_completed event due to FK constraint violation.\n\nERROR:\nwarning: failed to store cleanup event: failed to store agent event: constraint failed: FOREIGN KEY constraint failed (787)\n\nROOT CAUSE:\nEvent cleanup tries to create an 'event_cleanup_completed' event with issue_id='SYSTEM' or NULL, but the FK constraint on vc_agent_events requires:\n  FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE CASCADE\n\nSince 'SYSTEM' is not a real issue ID in the issues table, the insert fails.\n\nIMPACT:\n- Event cleanup events are not logged\n- Cannot track cleanup history\n\nFIXED: Removed FK constraint on vc_agent_events.issue_id (events are logs, not core data)","design":"Remove FOREIGN KEY constraint on issue_id. Events are primarily logs/metrics, losing referential integrity is acceptable for system events.","acceptance_criteria":"1. Event cleanup successfully stores cleanup_completed events\n2. System events with NULL issue_id can be stored\n3. No warnings in executor logs during cleanup","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:09:34.60982-07:00","updated_at":"2025-10-23T22:09:38.973531-07:00","closed_at":"2025-10-23T22:09:38.973531-07:00"}
{"id":"vc-4","title":"Invalid state transition: gates-\u003ecompleted should go through committing state","description":"Executor tests failing with invalid state transition error when trying to move from 'gates' to 'completed' state.\n\nERROR:\ninvalid state transition: cannot transition from gates to completed (valid transitions: [committing failed])\n\nROOT CAUSE:\nThe executor workflow expects: ...-\u003egates-\u003ecommitting-\u003ecompleted\nBut code is trying to skip the 'committing' state and go directly from 'gates' to 'completed'.\n\nIMPACT:\n- Multiple executor integration tests failing\n- Issues cannot be marked as completed after quality gates pass\n- Blocks entire executor workflow\n\nFAILING TESTS:\n- TestExecutorStateTransitions\n- TestExecutorStateSequence  \n- TestFullWorkflowEndToEnd\n- TestQualityGateBlocking\n- TestMultiTaskCoordination","design":"Fix by ensuring executor transitions through all required states:\n1. After quality gates pass, transition to 'committing' state\n2. Perform git operations (commit, push)\n3. Then transition to 'completed' state","acceptance_criteria":"1. All executor state transition tests pass\n2. Workflow goes: gates-\u003ecommitting-\u003ecompleted\n3. Integration tests complete successfully\n4. No 'invalid state transition' errors","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-23T22:09:52.855019-07:00","updated_at":"2025-10-23T22:09:52.855019-07:00"}
{"id":"vc-5","title":"UNIQUE constraint failure: vc_executor_instances.id when re-registering executor","description":"Tests failing with UNIQUE constraint violation when trying to register an executor instance that already exists.\n\nERROR:\nfailed to register executor instance: constraint failed: UNIQUE constraint failed: vc_executor_instances.id (1555)\n\nROOT CAUSE:\nRegisterInstance() is trying to INSERT a new executor instance, but the ID already exists in the table.\n\nIMPACT:\n- TestQualityGateRaceWithStaleCleanup FAIL\n- TestErrorRecoveryAndResume FAIL\n- TestResumeAfterInterruption FAIL\n- Tests cannot simulate stale executor scenarios","design":"Change RegisterInstance() to use UPSERT (INSERT OR REPLACE):\n- Allows re-registering same instance ID\n- Updates existing record if present","acceptance_criteria":"1. RegisterInstance() can be called multiple times with same ID\n2. Second call updates existing record instead of failing\n3. All executor state transition tests pass","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:10:02.944419-07:00","updated_at":"2025-10-23T22:10:02.944419-07:00"}
{"id":"vc-6","title":"Sandbox databases missing 'labels' table from Beads core schema","description":"Sandbox database operations failing because the 'labels' table doesn't exist in sandbox databases.\n\nERROR:\nSQL logic error: no such table: labels (1)\n\nROOT CAUSE:\nWhen creating sandbox databases, only VC extension tables are being created, not the full Beads core schema (issues, dependencies, labels, events, etc.).\n\nIMPACT:\n- TestQualityGateBlockingIntegration FAIL\n- TestCopyCoreIssuesRecursive FAIL\n- TestMergeResultsWithComments FAIL\n- All sandbox-based tests fail","design":"Fix sandbox database initialization:\n1. When creating sandbox database, call beads.NewVCStorage()\n2. This creates both Beads core tables AND VC extension tables\n3. Don't create tables manually - use the storage layer","acceptance_criteria":"1. Sandbox databases have all Beads core tables\n2. Sandbox databases have all VC extension tables\n3. All sandbox integration tests pass","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:10:13.76956-07:00","updated_at":"2025-10-23T22:10:13.76956-07:00"}
{"id":"vc-7","title":"Git worktree operations fail with 'invalid reference: main' in tests","description":"Sandbox creation failing in tests because git worktree cannot find 'main' branch.\n\nERROR:\nfailed to create worktree: git worktree add failed: exit status 128 (output: fatal: invalid reference: main)\n\nROOT CAUSE:\nTest repositories are initialized with git init, which creates no branches initially. The default branch might be 'master' or not exist at all until first commit.\n\nIMPACT:\n- TestResultsProcessorSandboxWorkingDir FAIL\n- TestResultsProcessorQualityGatesSandbox FAIL\n- TestRegressionVC117WrongDirectory FAIL\n- TestManager_Create FAIL\n- All sandbox and git tests fail","design":"Fix test repository initialization:\n1. In test setup, create initial commit on main branch:\n   git init\n   git checkout -b main\n   git commit --allow-empty -m 'Initial commit'\n2. Or detect actual default branch and use it","acceptance_criteria":"1. All git worktree tests pass\n2. Test repos have proper initial branch\n3. Worktree operations succeed in tests\n4. Works on both git versions (master vs main default)","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:10:25.88847-07:00","updated_at":"2025-10-23T22:10:25.88847-07:00"}
{"id":"vc-8","title":"CHECK constraint failure when closing issues: closed_at NULL mismatch","description":"CloseIssue operations failing with CHECK constraint violation about closed_at timestamp.\n\nERROR:\nfailed to close mission: failed to update issue: constraint failed: CHECK constraint failed: (status = 'closed') = (closed_at IS NOT NULL) (275)\n\nROOT CAUSE:\nThe issues table has a CHECK constraint:\n  CHECK ((status = 'closed') = (closed_at IS NOT NULL))\n\nThe CloseIssue implementation is setting status='closed' without also setting closed_at to CURRENT_TIMESTAMP.\n\nIMPACT:\n- TestFullWorkflowEndToEnd/close_mission FAIL\n- TestMergeResults FAIL\n- Cannot close issues or missions\n- Blocks workflow completion","design":"Fix CloseIssue implementation:\nWhen calling UpdateIssue with status='closed', also set closed_at=CURRENT_TIMESTAMP\nOr use Beads library's CloseIssue() method which should handle this automatically","acceptance_criteria":"1. CloseIssue sets both status='closed' AND closed_at=timestamp\n2. All close operation tests pass\n3. No CHECK constraint errors","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-23T22:10:37.088502-07:00","updated_at":"2025-10-23T22:10:37.088502-07:00"}
