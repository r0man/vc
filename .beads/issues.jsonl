{"id":"vc-209","title":"PREFLIGHT.md is documentation debt - convert to tracked issues","description":"PROBLEM: Created 598-line PREFLIGHT.md describing how preflight SHOULD work. This is documentation debt - it will go stale, contradict reality, and become useless. This is exactly why we invented Beads.\n\nULTRATHINK ANALYSIS:\n\nWhat PREFLIGHT.md describes:\n1. Self-healing executor (can fix baseline failures) - NOT IMPLEMENTED (vc-208 bug blocks this)\n2. Phase 2: Baseline comparison (only NEW failures block) - NOT IMPLEMENTED\n3. Phase 3: Sandbox reuse - NOT IMPLEMENTED\n4. Auto-recovery workflows - PARTIALLY IMPLEMENTED\n5. Configuration tuning - BASIC ONLY\n6. Troubleshooting guides - DOCUMENTATION ONLY\n\nWhat VibeCoder NEEDS to be 'engineer in a box':\n1. Self-healing: Fix own baseline failures without human\n2. Self-troubleshooting: Diagnose and fix flaky tests, gate issues\n3. Self-tuning: Adjust cache TTL based on hit rate metrics\n4. Self-managing: Handle git issues, merge conflicts, stale branches\n5. Self-recovering: Auto-restart after crashes, resume interrupted work\n6. Self-monitoring: Track and fix performance degradation\n7. Self-improving: Learn from failures, adjust gates, improve prompts\n\nWhat needs to happen:\n1. Break PREFLIGHT.md into discrete issues in Beads\n2. Each feature becomes tracked work with acceptance criteria\n3. Delete or minimize PREFLIGHT.md (keep only high-level overview)\n4. Make features discoverable through 'bd show' not markdown files\n5. Ensure all design/acceptance in Beads, not docs\n\nOUTCOME: VibeCoder can handle EVERYTHING a coding agent can handle, with opinionated controls, AI supervision, and self-sufficiency. Human only involved when truly necessary.","design":"APPROACH:\n\nPhase 1: Audit and Break Down (THIS EPIC)\n- Read PREFLIGHT.md line by line\n- Extract every feature/capability described\n- Create child issues for each capability\n- Tag with labels: implemented, partial, future, doc-only\n- Add dependencies between issues\n- Delete redundant documentation from PREFLIGHT.md\n\nPhase 2: Implement Self-Healing (Priority)\n- Fix vc-208: Executor claims baseline issues\n- Add troubleshooting prompts to AI supervisor\n- Enable executor to fix common baseline failures:\n  * Flaky tests (retry, investigate, fix)\n  * Lint errors (auto-format, fix obvious issues)\n  * Build errors (missing deps, version conflicts)\n- Add feedback loop: baseline failure → analysis → fix → commit\n\nPhase 3: Self-Management Features\n- Auto-tune cache TTL based on metrics\n- Handle git issues (merge conflicts, rebases)\n- Manage stale branches and commits\n- Clean up orphaned sandboxes\n- Monitor and fix performance issues\n\nPhase 4: Documentation Reduction\n- Reduce PREFLIGHT.md to 50 lines (overview + link to bd issues)\n- Move all design to issue descriptions\n- Move all acceptance criteria to issues\n- Move all examples to tests\n- Make Beads the source of truth\n\nANTI-PATTERNS TO AVOID:\n❌ Sprawling markdown docs that go stale\n❌ Features described in docs but not implemented\n❌ Documentation living outside issue tracker\n❌ Humans needed for things AI can handle\n❌ Executor stopping when it should self-heal\n\nPRINCIPLES:\n✅ All work tracked in Beads\n✅ All design in issue descriptions\n✅ All acceptance in issues\n✅ Executor is self-sufficient\n✅ AI supervision ensures quality\n✅ Human involved only when necessary","acceptance_criteria":"- PREFLIGHT.md reduced to \u003c100 lines (overview only)\n- All features extracted as child issues in Beads\n- Each issue has: description, design, acceptance, labels, dependencies\n- Dependencies between issues explicit\n- Implementation status clear (done/partial/future)\n- VibeCoder can self-heal baseline failures (vc-208 fixed)\n- VibeCoder can troubleshoot common issues without human\n- Documentation debt eliminated\n- Beads is source of truth for all preflight features","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-28T14:35:41.556652-07:00","updated_at":"2025-10-28T18:25:29.89277-07:00","closed_at":"2025-10-28T18:25:29.89277-07:00"}
{"id":"vc-212","title":"Phase 2: Baseline comparison - only NEW failures block","description":"CURRENT: ALL baseline failures block work (Phase 1).\n\nPHASE 2: Track which failures are pre-existing vs new:\n- Baseline A: test1 ✅ test2 ❌ test3 ✅\n- Commit change → Baseline B\n- Baseline B: test1 ✅ test2 ❌ test3 ❌\n- Result: test3 is NEW → block work, create issue\n- Result: test2 is PRE-EXISTING → don't block (grandfathered)\n\nThis allows work on codebases with known pre-existing issues while preventing NEW breakage.\n\nTRADE-OFF: Relaxes 'no pre-existing excuse' principle. May lead to quality degradation if pre-existing issues never get fixed.","design":"Database Schema:\n- Add baseline_parent_hash to vc_gate_baselines\n- Track failure diff between commits\n\nAlgorithm:\n1. Current baseline fails\n2. Look up parent commit baseline\n3. Diff the failures:\n   - failures_current - failures_parent = NEW failures\n   - NEW failures → create blocking issues\n   - Pre-existing failures → log warning, don't block\n\n4. Issue labels:\n   - new-failure: blocks work\n   - pre-existing-failure: doesn't block, tracked for cleanup\n\nConfiguration:\n- VC_PREFLIGHT_ALLOW_PREEXISTING (default: false for Phase 1)\n- When enabled, switches to Phase 2 behavior\n\nMonitoring:\n- Track: # pre-existing failures over time\n- Alert if pre-existing failures growing (quality degrading)","acceptance_criteria":"- Can diff baseline failures between commits\n- Only NEW failures create blocking issues\n- Pre-existing failures tracked but don't block\n- Configuration to enable/disable Phase 2\n- Metrics: NEW vs pre-existing failure counts\n- Warning if pre-existing failures growing\n- Tests verify: new failure blocks, pre-existing doesn't","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-28T14:37:26.191907-07:00","updated_at":"2025-10-28T18:25:42.62376-07:00","closed_at":"2025-10-28T18:25:42.62376-07:00","dependencies":[{"issue_id":"vc-212","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:37:51.373396-07:00","created_by":"stevey"}]}
{"id":"vc-215","title":"MISSIONS.md is documentation debt - convert to tracked epics","description":"PROBLEM: docs/architecture/MISSIONS.md is 37K of unimplemented design describing a complete mission-driven architecture. Status is 'Design (In Review)' from 2025-10-22. This is massive documentation debt.\n\nULTRATHINK ANALYSIS:\n\nWhat MISSIONS.md describes (NONE implemented):\n1. Mission = Epic structure (phases, child tasks, parent-child deps)\n2. Shared sandboxes per mission (git worktrees, branches)\n3. Worker types: Code, Quality Gates, GitOps Arbiter, Human, Merger\n4. Label-driven state machine (needs-quality-gates, needs-review, etc)\n5. Terminal state detection (epic complete when all children done)\n6. Self-healing convergence loops (gates fail → file issues → iterate)\n7. GitOps flow: arbiter review → human approval → automated merge\n8. Parallel missions (multiple sandboxes)\n\nWhat exists today (from dogfooding runs):\n- Basic executor: claims open issues, runs agent, quality gates\n- AI supervisor: assess/analyze\n- Single-issue execution (no missions/epics yet)\n- Manual git operations (no GitOps)\n- No sandboxes (works in main repo)\n- No worker types (one executor type)\n- No label-driven state machine\n\nMISSIONS.md even has a roadmap with 7 epics to build it - BUT NOT IN BEADS.\n\nThis is the same problem as PREFLIGHT.md but 10x worse:\n- 37K vs 600 lines\n- 7 major epics described vs 3-4 features\n- Complete system redesign vs one feature\n\nOUTCOME NEEDED:\nConvert MISSIONS.md → tracked epics in Beads with:\n- Epic hierarchy matching MISSIONS.md roadmap\n- Dependencies explicit\n- Implementation status clear\n- Beads as source of truth\n- Delete or drastically reduce MISSIONS.md","design":"APPROACH:\n\nPhase 1: Extract Epics from MISSIONS.md\nMISSIONS.md already lists implementation roadmap with 7 epics:\n1. Epic-Centric Infrastructure (P0)\n2. Sandbox Lifecycle (P0)\n3. Label-Driven State Machine (P1)\n4. Quality Gate Workers (P1)\n5. GitOps Arbiter (P1)\n6. GitOps Merger (P2)\n7. Parallel Missions (P2)\n\nCreate these as actual epics in Beads with:\n- Each epic has description extracted from MISSIONS.md\n- Child issues for major components\n- Dependencies between epics\n- Parent: this epic (vc-215)\n\nPhase 2: Worker Type Issues\nFor each worker type described:\n- Code Workers (already exist partially)\n- Quality Gate Workers (partially exist)\n- GitOps Arbiter (new)\n- Human Approvers (new pattern)\n- GitOps Merger (new)\n\nPhase 3: Core Infrastructure\n- Mission/Phase/Task type system\n- Sandbox lifecycle (create, share, cleanup)\n- Terminal state detection\n- Label state machine\n\nPhase 4: Documentation Cleanup\nReduce MISSIONS.md to:\n- 100-line overview of vision\n- Link to bd show vc-215 for tracked work\n- Historical context only\n- Everything else in Beads\n\nANTI-PATTERNS:\n❌ 37K design docs describing unbuilt systems\n❌ Roadmaps in markdown not tracked in Beads\n❌ 'Status: Design (In Review)' that never changes\n❌ Features described but never prioritized\n\nPRINCIPLES:\n✅ All epics tracked in Beads\n✅ All roadmaps are issue dependencies\n✅ Can query: 'what's ready to build?'\n✅ Status in Beads, not markdown files","acceptance_criteria":"- All 7 epics from MISSIONS.md roadmap created in Beads\n- Each epic has child issues for components\n- Dependencies mapped (Epic 1 blocks Epic 3, etc)\n- Labels added: mission-architecture, worker-type, gitops, etc\n- MISSIONS.md reduced to \u003c100 lines (vision + link to Beads)\n- 'bd dep tree vc-215' shows full mission architecture\n- 'bd ready' can show what's ready to build next\n- No information loss (everything in Beads)","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-28T15:39:28.863828-07:00","updated_at":"2025-10-28T18:25:36.389995-07:00","closed_at":"2025-10-28T18:25:36.389995-07:00"}
