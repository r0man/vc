{"id":"vc-215","title":"MISSIONS.md is documentation debt - convert to tracked epics","description":"PROBLEM: docs/architecture/MISSIONS.md is 37K of unimplemented design describing a complete mission-driven architecture. Status is 'Design (In Review)' from 2025-10-22. This is massive documentation debt.\n\nULTRATHINK ANALYSIS:\n\nWhat MISSIONS.md describes (NONE implemented):\n1. Mission = Epic structure (phases, child tasks, parent-child deps)\n2. Shared sandboxes per mission (git worktrees, branches)\n3. Worker types: Code, Quality Gates, GitOps Arbiter, Human, Merger\n4. Label-driven state machine (needs-quality-gates, needs-review, etc)\n5. Terminal state detection (epic complete when all children done)\n6. Self-healing convergence loops (gates fail → file issues → iterate)\n7. GitOps flow: arbiter review → human approval → automated merge\n8. Parallel missions (multiple sandboxes)\n\nWhat exists today (from dogfooding runs):\n- Basic executor: claims open issues, runs agent, quality gates\n- AI supervisor: assess/analyze\n- Single-issue execution (no missions/epics yet)\n- Manual git operations (no GitOps)\n- No sandboxes (works in main repo)\n- No worker types (one executor type)\n- No label-driven state machine\n\nMISSIONS.md even has a roadmap with 7 epics to build it - BUT NOT IN BEADS.\n\nThis is the same problem as PREFLIGHT.md but 10x worse:\n- 37K vs 600 lines\n- 7 major epics described vs 3-4 features\n- Complete system redesign vs one feature\n\nOUTCOME NEEDED:\nConvert MISSIONS.md → tracked epics in Beads with:\n- Epic hierarchy matching MISSIONS.md roadmap\n- Dependencies explicit\n- Implementation status clear\n- Beads as source of truth\n- Delete or drastically reduce MISSIONS.md","design":"APPROACH:\n\nPhase 1: Extract Epics from MISSIONS.md\nMISSIONS.md already lists implementation roadmap with 7 epics:\n1. Epic-Centric Infrastructure (P0)\n2. Sandbox Lifecycle (P0)\n3. Label-Driven State Machine (P1)\n4. Quality Gate Workers (P1)\n5. GitOps Arbiter (P1)\n6. GitOps Merger (P2)\n7. Parallel Missions (P2)\n\nCreate these as actual epics in Beads with:\n- Each epic has description extracted from MISSIONS.md\n- Child issues for major components\n- Dependencies between epics\n- Parent: this epic (vc-215)\n\nPhase 2: Worker Type Issues\nFor each worker type described:\n- Code Workers (already exist partially)\n- Quality Gate Workers (partially exist)\n- GitOps Arbiter (new)\n- Human Approvers (new pattern)\n- GitOps Merger (new)\n\nPhase 3: Core Infrastructure\n- Mission/Phase/Task type system\n- Sandbox lifecycle (create, share, cleanup)\n- Terminal state detection\n- Label state machine\n\nPhase 4: Documentation Cleanup\nReduce MISSIONS.md to:\n- 100-line overview of vision\n- Link to bd show vc-215 for tracked work\n- Historical context only\n- Everything else in Beads\n\nANTI-PATTERNS:\n❌ 37K design docs describing unbuilt systems\n❌ Roadmaps in markdown not tracked in Beads\n❌ 'Status: Design (In Review)' that never changes\n❌ Features described but never prioritized\n\nPRINCIPLES:\n✅ All epics tracked in Beads\n✅ All roadmaps are issue dependencies\n✅ Can query: 'what's ready to build?'\n✅ Status in Beads, not markdown files","acceptance_criteria":"- All 7 epics from MISSIONS.md roadmap created in Beads\n- Each epic has child issues for components\n- Dependencies mapped (Epic 1 blocks Epic 3, etc)\n- Labels added: mission-architecture, worker-type, gitops, etc\n- MISSIONS.md reduced to \u003c100 lines (vision + link to Beads)\n- 'bd dep tree vc-215' shows full mission architecture\n- 'bd ready' can show what's ready to build next\n- No information loss (everything in Beads)","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-28T15:39:28.863828-07:00","updated_at":"2025-10-28T15:39:28.863828-07:00"}
{"id":"vc-216","title":"Epic-Centric Infrastructure","description":"CURRENT: Executor claims individual issues without epic context. Workers don't scope to epics. No way to detect 'is this epic complete?'\n\nNEEDED: Core infrastructure for epic-centric workflow where workers operate within mission context.\n\nComponents:\n- Add mission/phase/review subtypes to epic type\n- Implement label-based claiming queries\n- Add terminal state detection (epic completion check)\n- Add get_mission_for_task() helper\n- Update executor to scope work to epics\n- Query: 'next ready task in any active mission'\n- Query: 'is this epic complete?' (all children done, no blockers)\n\nFROM: MISSIONS.md roadmap Epic 1 (P0)","design":"Database:\n- Use issue.subtype field (mission, phase, review)\n- Labels table for state tracking\n- Queries joining issues → dependencies → parent epics\n\nQueries to implement:\n1. IsEpicComplete(epicID):\n   - All children in terminal states (closed/deferred)\n   - No open blocking dependencies\n   - Return: bool\n\n2. GetNextReadyTask():\n   - Open tasks with no blockers\n   - Belonging to active missions (not waiting for gates)\n   - Return: taskID, missionID, sandboxPath\n\n3. GetMissionForTask(taskID):\n   - Walk parent-child deps up to epic with subtype=mission\n   - Return: missionID, sandboxPath, branchName\n\nExecutor changes:\n- After task completion: check if parent epic complete\n- If complete: add label 'needs-quality-gates'\n- Work claiming: filter by mission active state","acceptance_criteria":"- issue.subtype field added/used (mission, phase, review)\n- IsEpicComplete() query implemented and tested\n- GetNextReadyTask() returns mission context\n- GetMissionForTask() walks dependency tree\n- Executor checks epic completion after task done\n- Tests: create mission with tasks, verify completion detection\n- Tests: verify claiming scopes to active missions","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-28T15:40:09.420273-07:00","updated_at":"2025-10-28T15:40:09.420273-07:00","dependencies":[{"issue_id":"vc-216","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:40:31.710766-07:00","created_by":"stevey"}]}
{"id":"vc-217","title":"Sandbox Lifecycle Management","description":"CURRENT: No sandboxes. Agents work directly in main repo. No isolation between missions. Manual git operations.\n\nNEEDED: Automatic sandbox lifecycle for missions using git worktrees.\n\nEach mission gets:\n- Dedicated sandbox directory (.sandboxes/mission-XXX/)\n- Dedicated git branch (mission/vc-XXX-title)\n- Shared by all workers on that mission\n- Auto-created on mission start\n- Auto-cleaned on mission close\n\nWorkers on same mission see each other's commits (shared context).\n\nFROM: MISSIONS.md roadmap Epic 2 (P0)","design":"Database schema:\n- Add issue.sandbox_path TEXT\n- Add issue.branch_name TEXT\n- Store per mission epic\n\nLifecycle functions:\n1. CreateSandbox(missionID):\n   - Generate sandbox path: .sandboxes/mission-{ID}/\n   - Generate branch name: mission/{ID}-{slug}\n   - git worktree add {path} -b {branch}\n   - Update mission issue: sandbox_path, branch_name\n   - Add label: sandbox:mission-{ID}\n\n2. CleanupSandbox(missionID):\n   - git worktree remove {sandbox_path}\n   - git branch -D {branch_name}\n   - Remove label: sandbox:mission-{ID}\n\nAgent executor changes:\n- Before claiming task: lookup mission sandbox\n- Execute agent in sandbox directory\n- Commits go to mission branch\n\nExecutor integration:\n- Mission creation: auto-call CreateSandbox()\n- Mission close: auto-call CleanupSandbox()\n- Task claiming: pass sandbox path to agent","acceptance_criteria":"- issue.sandbox_path and branch_name fields added\n- CreateSandbox() creates worktree + branch\n- CleanupSandbox() removes worktree + branch\n- Agent executor uses mission sandbox\n- Multiple tasks in same mission share sandbox\n- Sandbox cleaned up on mission close\n- Tests: create mission, verify sandbox exists\n- Tests: close mission, verify sandbox removed\n- Tests: multiple workers share sandbox (sequential)","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-28T15:40:36.797252-07:00","updated_at":"2025-10-28T15:40:36.797252-07:00","dependencies":[{"issue_id":"vc-217","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:40:58.876069-07:00","created_by":"stevey"},{"issue_id":"vc-217","depends_on_id":"vc-216","type":"blocks","created_at":"2025-10-28T15:41:03.976916-07:00","created_by":"stevey"}]}
{"id":"vc-218","title":"Label-Driven State Machine","description":"CURRENT: Status-only claiming (open/in_progress/closed). No workflow states. Workers claim any open work.\n\nNEEDED: Label-driven state machine where mission progress flows through states, claimed by different worker types.\n\nState flow:\n- task-ready → Code Workers claim\n- needs-quality-gates → QA Workers claim\n- needs-review → GitOps Arbiter claims\n- needs-human-approval → Human Approvers claim\n- approved → GitOps Merger claims\n\nLabels drive which worker claims what work.\n\nFROM: MISSIONS.md roadmap Epic 3 (P1)","design":"Label State Machine:\n1. Task completed → check epic complete\n2. If epic complete → add label 'needs-quality-gates' to mission\n3. QA worker claims missions with 'needs-quality-gates'\n4. Gates pass → remove 'needs-quality-gates', add 'needs-review'\n5. Arbiter claims missions with 'needs-review'\n6. Review done → remove 'needs-review', add 'needs-human-approval'\n7. Human approves → add 'approved' label\n8. Merger claims missions with 'approved' label\n\nHelper functions:\n- AddLabel(issueID, label)\n- RemoveLabel(issueID, label)\n- HasLabel(issueID, label)\n- TransitionState(issueID, fromLabel, toLabel)\n\nWorker claiming rules:\n- Code Workers: open tasks, mission not in (needs-quality-gates, needs-review)\n- QA Workers: missions with 'needs-quality-gates'\n- Arbiter: missions with 'needs-review'\n- Merger: missions with 'approved'\n\nState transitions logged to agent_events for monitoring.","acceptance_criteria":"- Label helpers implemented (Add/Remove/Has)\n- State transitions automatic after task completion\n- Epic completion triggers 'needs-quality-gates'\n- Each state has worker type that claims it\n- Labels block/unblock work appropriately\n- Tests: task complete → epic complete → needs-quality-gates\n- Tests: verify claiming rules filter by labels\n- Tests: state machine doesn't skip states","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-28T15:41:09.070728-07:00","updated_at":"2025-10-28T15:41:09.070728-07:00","dependencies":[{"issue_id":"vc-218","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:41:31.723201-07:00","created_by":"stevey"},{"issue_id":"vc-218","depends_on_id":"vc-216","type":"blocks","created_at":"2025-10-28T15:41:36.80681-07:00","created_by":"stevey"}]}
{"id":"vc-219","title":"Quality Gate Workers (Not Inline)","description":"CURRENT: Quality gates run inline during task execution. Blocks worker. No parallelism (can't run gates on mission A while working on mission B).\n\nNEEDED: Quality gates as separate worker type that claims missions ready for gates.\n\nQA Worker:\n- Claims missions with label 'needs-quality-gates'\n- Runs BUILD, TEST, LINT in mission sandbox\n- On success: add 'needs-review' label\n- On failure: create blocking issues, keep 'needs-quality-gates'\n- Parallel: gates run on mission A while code workers work on mission B\n\nFROM: MISSIONS.md roadmap Epic 4 (P1)","design":"Worker Type: QualityGateWorker\n\nClaiming rule:\nSELECT id FROM issues\nWHERE type = 'epic'\n  AND subtype = 'mission'\n  AND EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'needs-quality-gates')\n  AND NOT EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'gates-running')\nLIMIT 1;\n\nExecution:\n1. Add label 'gates-running' (prevent double-claiming)\n2. Get mission sandbox from issue.sandbox_path\n3. Run gates in sandbox:\n   - BUILD: go build ./...\n   - TEST: go test ./...\n   - LINT: golangci-lint run\n4. Analyze failures (if any)\n5. On success:\n   - Remove 'needs-quality-gates', 'gates-running'\n   - Add 'needs-review'\n6. On failure:\n   - Create blocking issues for failures\n   - Remove 'gates-running'\n   - Keep 'needs-quality-gates' (retry after fixes)\n   - Add 'gates-failed' (blocks claiming until fixed)\n\nBenefits:\n- Parallelism: gates don't block code workers\n- Visibility: gates as tracked work\n- Retry logic: gates re-run after fixes","acceptance_criteria":"- QualityGateWorker implemented as separate worker\n- Claims missions with 'needs-quality-gates' label\n- Runs gates in mission sandbox\n- Success → transition to 'needs-review'\n- Failure → create blocking issues\n- Tests: mission completes → gates claimed by QA worker\n- Tests: gates fail → blocking issues created\n- Tests: gates pass → mission transitions to review","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-28T15:41:41.888867-07:00","updated_at":"2025-10-28T15:41:41.888867-07:00","dependencies":[{"issue_id":"vc-219","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:42:07.09624-07:00","created_by":"stevey"},{"issue_id":"vc-219","depends_on_id":"vc-218","type":"blocks","created_at":"2025-10-28T15:42:12.193319-07:00","created_by":"stevey"}]}
{"id":"vc-220","title":"GitOps Arbiter (Extended-Thinking Review)","description":"CURRENT: No coherence review. Changes committed without holistic analysis. No human approval gate.\n\nNEEDED: AI Arbiter that performs extended-thinking review (3-5 min) of completed missions before human approval.\n\nArbiter:\n- Claims missions with 'needs-review' label\n- Analyzes all commits in mission branch\n- Performs extended thinking (coherence, safety, quality)\n- Generates review report with confidence score\n- Creates review issue for human approval\n- Blocks mission on review issue\n\nThis is the 'GitOps' part - automated review + human approval before merge.\n\nFROM: MISSIONS.md roadmap Epic 5 (P1)","design":"Worker Type: GitOpsArbiter\n\nClaiming rule:\nSELECT id FROM issues\nWHERE type = 'epic'\n  AND subtype = 'mission'\n  AND EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'needs-review')\n  AND NOT EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'review-in-progress')\nLIMIT 1;\n\nReview process:\n1. Add label 'review-in-progress'\n2. Analyze mission:\n   - git log mission/{branch}\n   - git diff main...mission/{branch}\n   - Review all commits, files changed\n3. Extended thinking (3-5 min):\n   - Coherence: do changes work together?\n   - Safety: any risks or regressions?\n   - Quality: code quality, tests, docs?\n   - Completeness: acceptance criteria met?\n4. Generate review report:\n   - Summary (2-3 paragraphs)\n   - Changes overview (files, LOC)\n   - Confidence score (0.0-1.0)\n   - Safety concerns (if any)\n   - Recommendation: APPROVE / NEEDS_WORK / REJECT\n5. Create review issue:\n   - Title: 'Review: {mission title}'\n   - Type: epic, subtype: review\n   - Description: full review report\n   - Blocks: mission epic\n   - Labels: needs-human-approval\n6. Update mission:\n   - Remove 'needs-review', 'review-in-progress'\n   - Add 'review-complete'\n   - Add 'needs-human-approval'\n\nHuman workflow:\n- Sees review issue: vc-XXX-review\n- Reads arbiter analysis\n- Checks code in sandbox\n- Approves: adds 'approved' label to mission\n- Rejects: adds 'needs-rework' label + comment","acceptance_criteria":"- GitOpsArbiter worker implemented\n- Claims missions with 'needs-review'\n- Performs extended-thinking analysis\n- Generates insightful review reports\n- Creates review issues with confidence scores\n- Human can approve/reject via labels\n- Tests: mission gets review → arbiter analyzes\n- Tests: review issue blocks mission\n- Tests: human approval triggers next state","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-28T15:42:17.292982-07:00","updated_at":"2025-10-28T15:42:17.292982-07:00","dependencies":[{"issue_id":"vc-220","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:42:39.377949-07:00","created_by":"stevey"},{"issue_id":"vc-220","depends_on_id":"vc-218","type":"blocks","created_at":"2025-10-28T15:42:44.476398-07:00","created_by":"stevey"}]}
{"id":"vc-221","title":"GitOps Merger (Automated Merge)","description":"CURRENT: Manual git merge. No automated merge on approval. No cleanup automation.\n\nNEEDED: Automated merger that safely merges approved missions to main and cleans up.\n\nGitOps Merger:\n- Claims missions with 'approved' label\n- Performs safe merge (--no-ff, preserves history)\n- Handles merge conflicts (escalate to human)\n- Cleans up sandbox and branch\n- Closes mission epic\n- Provides rollback mechanism\n\nFinal step in GitOps flow: human approves → bot merges.\n\nFROM: MISSIONS.md roadmap Epic 6 (P2)","design":"Worker Type: GitOpsMerger\n\nClaiming rule:\nSELECT id FROM issues\nWHERE type = 'epic'\n  AND subtype = 'mission'\n  AND EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'approved')\n  AND NOT EXISTS (SELECT 1 FROM labels WHERE issue_id = issues.id AND label = 'merge-in-progress')\nLIMIT 1;\n\nMerge process:\n1. Add label 'merge-in-progress'\n2. Verify preconditions:\n   - All quality gates passed\n   - Review approved\n   - No open blocking issues\n3. Attempt merge:\n   git checkout main\n   git pull origin main\n   git merge --no-ff mission/{branch}\n4. On success:\n   - Push to main\n   - Close mission epic\n   - Add label 'merged'\n   - Call CleanupSandbox()\n   - Log merge event\n5. On conflict:\n   - Abort merge\n   - Create escalation issue\n   - Add label 'merge-conflict'\n   - Block on escalation issue\n   - Human resolves conflict manually\n\nRollback mechanism:\n- Store pre-merge commit SHA\n- On rollback request:\n  git reset --hard {pre-merge-sha}\n  git push origin main --force (requires approval)\n\nSafety:\n- Only merge if all gates passed\n- Only merge if review approved\n- Always --no-ff (preserve mission history)\n- Log all merges to agent_events","acceptance_criteria":"- GitOpsMerger worker implemented\n- Claims missions with 'approved' label\n- Performs safe merge with --no-ff\n- Merge conflicts escalate to human\n- Successful merge closes mission + cleanup\n- Rollback mechanism available\n- Tests: approved mission → auto-merged\n- Tests: merge conflict → escalation issue\n- Tests: post-merge cleanup (sandbox removed)","status":"open","priority":3,"issue_type":"epic","created_at":"2025-10-28T15:42:49.584752-07:00","updated_at":"2025-10-28T15:42:49.584752-07:00","dependencies":[{"issue_id":"vc-221","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:43:12.054895-07:00","created_by":"stevey"},{"issue_id":"vc-221","depends_on_id":"vc-220","type":"blocks","created_at":"2025-10-28T15:43:17.152523-07:00","created_by":"stevey"}]}
{"id":"vc-222","title":"Parallel Missions (Multi-Tenancy)","description":"CURRENT: Only one mission at a time. Sequential execution. Workers idle while waiting for gates/review.\n\nNEEDED: Support multiple concurrent missions with worker distribution and resource management.\n\nMulti-mission execution:\n- Up to 5 missions active simultaneously\n- Workers distributed by priority\n- Each mission has own sandbox (isolation)\n- Resource limits (CPU, memory, disk)\n- Priority-based scheduling\n\nExample:\n- Mission A (P1): 3 code workers + 1 QA worker\n- Mission B (P2): 2 code workers\n- Mission C (P1): 1 code worker + 1 arbiter\n- Total: 8 workers across 3 missions\n\nFROM: MISSIONS.md roadmap Epic 7 (P2)","design":"Configuration:\n- MAX_CONCURRENT_MISSIONS (default: 5)\n- MAX_WORKERS_PER_MISSION (default: 3)\n- TOTAL_WORKER_POOL (default: 10)\n\nWorker scheduling:\n1. Get active missions (with open work)\n2. Sort by priority\n3. Distribute workers:\n   - P1 missions get more workers\n   - P3 missions get fewer workers\n   - At least 1 worker per mission\n   - Respect per-mission limits\n\nClaiming modifications:\n- GetNextReadyTask(): consider mission priority\n- Workers prefer high-priority missions\n- Balance: don't starve low-priority missions\n\nResource management:\n- Track disk usage per sandbox\n- Track memory usage per worker\n- Fail fast if resources exhausted\n- Cleanup stale sandboxes\n\nMonitoring:\n- Dashboard: missions by state\n- Workers per mission\n- Resource utilization\n- Estimated completion time\n\nConflicts:\n- Git operations isolated by sandbox\n- No shared state between missions\n- Dependencies within mission only","acceptance_criteria":"- Can run 5 missions concurrently\n- Workers distributed by priority\n- Resource limits enforced\n- No resource exhaustion\n- No conflicts between missions\n- Tests: start 5 missions, verify all progress\n- Tests: priority affects worker distribution\n- Monitoring dashboard shows multi-mission state","status":"open","priority":3,"issue_type":"epic","created_at":"2025-10-28T15:43:22.266233-07:00","updated_at":"2025-10-28T15:43:22.266233-07:00","dependencies":[{"issue_id":"vc-222","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:43:48.407456-07:00","created_by":"stevey"},{"issue_id":"vc-222","depends_on_id":"vc-217","type":"blocks","created_at":"2025-10-28T15:43:53.520436-07:00","created_by":"stevey"}]}
{"id":"vc-223","title":"Mission Planning (AI Planner)","description":"CURRENT: Issues created manually by humans. No automated breakdown of user requests.\n\nNEEDED: AI Planner that translates natural language requests into mission epics with phases and tasks.\n\nUser workflow:\nUser: 'Add OAuth authentication'\nAI Planner: Creates mission epic vc-300 with:\n  - 3 phase epics (Setup, Integration, Testing)\n  - 15 child tasks across phases\n  - Dependencies modeled\n  - Acceptance criteria generated\nMission starts automatically\n\nThis is the REPL conversational interface for VibeCoder.\n\nFROM: MISSIONS.md roadmap Epic 8 (P1)","design":"Worker Type: MissionPlanner\n\nInput: Natural language request from user\nOutput: Mission epic + phases + tasks\n\nPlanning prompt:\n1. Understand request:\n   - What is user asking for?\n   - What's the scope?\n   - What are the phases?\n2. Break into phases:\n   - Each phase = child epic\n   - Phases execute sequentially\n   - 3-5 phases typical\n3. Break phases into tasks:\n   - Each task = concrete work item\n   - 3-7 tasks per phase\n   - Tasks have acceptance criteria\n4. Model dependencies:\n   - Phase 2 depends on Phase 1\n   - Tasks within phase can be parallel\n   - Cross-phase dependencies explicit\n5. Generate acceptance criteria:\n   - Per task: specific, testable\n   - Per phase: phase-level goals\n   - Per mission: overall success criteria\n\nREPL integration:\nUser: 'Let's continue' or 'Add OAuth'\nREPL: Captures request, creates planning issue\nPlanner: Claims planning issue\nPlanner: Generates mission structure\nPlanner: Creates all issues in Beads\nPlanner: Starts mission (CreateSandbox)\nREPL: 'Mission vc-300 started, ETA 2-4 hours'\n\nExamples stored as few-shot prompts:\n- Simple feature (5-10 tasks)\n- Complex feature (20-30 tasks)\n- Bug fix (1-3 tasks)\n- Refactoring (10-15 tasks)","acceptance_criteria":"- MissionPlanner worker implemented\n- Translates NL request → mission structure\n- Creates mission epic + phases + tasks\n- Dependencies modeled correctly\n- Acceptance criteria generated\n- Mission auto-starts after planning\n- REPL integration (user request → planning)\n- Tests: 'Add OAuth' → verify mission structure\n- Tests: dependencies correct (phase blocking)\n- Few-shot examples for different request types","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-28T15:43:58.622296-07:00","updated_at":"2025-10-28T15:43:58.622296-07:00","dependencies":[{"issue_id":"vc-223","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:44:11.255061-07:00","created_by":"stevey"},{"issue_id":"vc-223","depends_on_id":"vc-216","type":"blocks","created_at":"2025-10-28T15:44:16.371851-07:00","created_by":"stevey"}]}
{"id":"vc-224","title":"Reduce MISSIONS.md to \u003c100 lines, delete stale docs","description":"CURRENT: docs/architecture/MISSIONS.md is 37K describing unimplemented features. All 8 epics now tracked in Beads (vc-216 through vc-223).\n\nAlso stale: MISSIONS_CONVERGENCE.md, BEADS_*.md docs already implemented.\n\nTASK:\n1. Reduce MISSIONS.md to \u003c100 lines:\n   - Vision overview (2-3 paragraphs)\n   - Link to bd show vc-215 for tracked work\n   - Link to bd dep tree vc-215 for roadmap\n   - Remove all unimplemented feature descriptions\n\n2. Archive BEADS_*.md to docs/archive/:\n   - BEADS_INTEGRATION.md (already implemented)\n   - BEADS_EXTENSIBILITY.md (already implemented)\n   - BEADS_LIBRARY_REVIEW.md (historical)\n\n3. Delete MISSIONS_CONVERGENCE.md:\n   - Says 'MERGED INTO MISSIONS.md'\n   - Duplicate content\n\nResult: Beads is source of truth, not 130K of markdown.","design":"New MISSIONS.md structure (100 lines):\n# Mission-Driven Architecture\n\nVC executes work as missions (epics) with phases and tasks.\nWorkers share sandboxes. GitOps flow: code → gates → review → merge.\n\n## Vision\n[2-3 paragraphs from current doc]\n\n## Tracked Work\nAll implementation tracked in Beads:\n- Parent epic: bd show vc-215\n- Roadmap: bd dep tree vc-215\n- Ready work: bd list --label mission-architecture\n\n## Epics\n1. vc-216: Epic-Centric Infrastructure\n2. vc-217: Sandbox Lifecycle\n3. vc-218: Label-Driven State Machine\n4. vc-219: Quality Gate Workers\n5. vc-220: GitOps Arbiter\n6. vc-221: GitOps Merger\n7. vc-222: Parallel Missions\n8. vc-223: Mission Planning\n\nSee Beads for design, acceptance, status.\n\nArchive commands:\nmv docs/architecture/BEADS_*.md docs/archive/\ngit rm docs/architecture/MISSIONS_CONVERGENCE.md\n\nVerify no information loss:\n- All epics in Beads\n- All design in issue descriptions\n- All acceptance in issues","acceptance_criteria":"- MISSIONS.md is \u003c100 lines\n- Contains only vision + links to Beads\n- BEADS_*.md moved to docs/archive/\n- MISSIONS_CONVERGENCE.md deleted\n- No information loss (everything in vc-216 through vc-223)\n- git diff shows only doc reduction\n- bd dep tree vc-215 shows full roadmap","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T15:44:42.614437-07:00","updated_at":"2025-10-28T15:44:42.614437-07:00","dependencies":[{"issue_id":"vc-224","depends_on_id":"vc-215","type":"parent-child","created_at":"2025-10-28T15:44:55.190184-07:00","created_by":"stevey"}]}
