{"id":"vc-105","title":"CleanupStaleInstances doesn't release claimed issues (Beads migration bug)","description":"The Beads wrapper's CleanupStaleInstances (storage/beads/executor.go:107) only marks instances as crashed but doesn't release their claimed issues. This causes issues to be permanently stuck in 'assessing', 'executing', etc. states when executors die.\n\nThe old SQLite implementation (storage/sqlite/executor_instances.go:144) correctly:\n1. Marks stale instances as crashed\n2. Finds all issues claimed by stale/orphaned instances\n3. Deletes execution state for those issues\n4. Resets issue status to 'open'\n5. Adds a comment explaining the release\n\nThe Beads version only does step 1.\n\nFound during dogfooding run #20 (vc-205). Current state: 5 stale executors (20-31 minutes old) with vc-26 stuck in 'assessing' state.","acceptance_criteria":"CleanupStaleInstances releases all claimed issues when marking executors as crashed. Issues return to 'open' status and execution state is deleted. Orphaned claims from stopped instances are also released.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-23T11:06:12.77532-07:00","updated_at":"2025-10-27T20:22:45.46501-07:00","closed_at":"2025-10-23T13:08:53.042579-07:00"}
{"id":"vc-109","title":"Executor polls but never claims ready work","description":"Executor runs, polls every 5 seconds, updates heartbeat, but never claims any of the available ready work.\n\nOBSERVED (Dogfooding Run #23, 2025-10-23 14:19-14:25):\n- Executor started successfully\n- Heartbeat updating (confirmed in vc_executor_instances table)\n- Ready work available: vc-37, vc-69, vc-70, vc-205, vc-31, etc. (confirmed with 'bd ready')\n- Executor polled for 3+ minutes (~36+ polls at 5s interval)\n- NO issues claimed (no 'issue_claimed' events, no 'Executing issue...' output)\n- NO errors in log (clean startup, clean shutdown)\n- No stderr output\n\nEXPECTED:\n- Executor should claim first ready issue (vc-37 or similar)\n- Should output 'Executing issue vc-X: ...'\n- Should emit 'issue_claimed' event\n\nROOT CAUSE HYPOTHESIS:\nGetReadyWork() may be:\n1. Returning empty results even though issues exist\n2. Filtering out all available work (type filter? subtype filter?)\n3. Having SQL query mismatch between bd CLI and VC executor\n4. Silent error being caught and ignored\n\nEVIDENCE:\n- Log: /tmp/vc-executor-run23.log (3 minutes of polling, zero claims)\n- bd ready shows 10+ ready issues\n- Executor heartbeat confirms it's alive and polling\n- processNextIssue() returns nil when len(issues)==0 (line 529-531 in executor.go)\n\nIMPACT: CRITICAL\n- Executor completely non-functional\n- Cannot claim or execute any work\n- Blocks all dogfooding and autonomous operation","design":"Investigation needed:\n1. Add debug logging to GetReadyWork() - log query and result count\n2. Add debug logging to processNextIssue() - log when no work found\n3. Compare SQL queries between 'bd ready' and executor GetReadyWork()\n4. Check if type/subtype filtering is excluding all work\n5. Test with minimal reproduction case","acceptance_criteria":"Executor claims and executes ready work when available. Cannot reproduce this bug (executor claims work reliably).","notes":"ROOT CAUSE IDENTIFIED:\n\nThe bug has TWO parts:\n\n1. **Orphaned Claim Not Cleaned Up**:\n   - Instance 1011a8db stopped at 13:30 with vc-37 claimed (state='executing')\n   - CleanupStaleInstances only runs when an executor is running\n   - Between 13:30-14:19 NO executor ran, so cleanup never happened\n   - When executor started at 14:19, cleanup runs every 5min but claim already orphaned\n\n2. **GetReadyWork Returns Already-Claimed Issues**:\n   - GetReadyWork queries issues table (status='open')\n   - vc-37 has status='open' in issues table (never updated to 'in_progress')  \n   - BUT vc-37 has execution_state row (claimed by stopped instance)\n   - ClaimIssue fails: 'issue vc-37 already claimed by 1011a8db...'\n   - Executor silently ignores claim failure, continues polling\n\nEVIDENCE:\nDebug output shows:\n- GetReadyWork returns 1 issue (vc-37) every poll\n- Claim fails: 'already claimed by 1011a8db...'\n- After manual DELETE of execution_state, claim succeeds immediately\n\nTHE FIX NEEDS TWO PARTS:\n1. GetReadyWork should EXCLUDE issues with existing execution_state\n2. OR CleanupStaleInstances should run on executor startup (not just periodically)\n\nCurrently implemented: CleanupStaleInstances checks for orphaned claims from stopped instances (executor.go:146-173), but only runs if an executor is already running.\n\nWORKAROUND:\nManually delete orphaned execution_state rows before starting executor.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-23T14:24:13.492615-07:00","updated_at":"2025-10-27T20:22:45.464458-07:00","closed_at":"2025-10-23T16:43:05.132066-07:00"}
{"id":"vc-190","title":"Executor selects low-priority work instead of high-priority","description":"During dogfooding, executor selected vc-2 (P3) instead of available P0/P1 work like vc-26 or vc-205. The GetReadyWork() call in processNextIssue() doesn't specify priority ordering, and the Beads ready_work view may not be sorting by priority correctly.","design":"Investigate the priority ordering in GetReadyWork:\n1. Check the Beads library's ready_work view/query SQL\n2. Verify that it includes 'ORDER BY priority ASC' (lower number = higher priority)\n3. Add integration test that verifies priority ordering\n4. If Beads query is correct, check if VC's WorkFilter is passing priority correctly","acceptance_criteria":"Executor consistently selects highest-priority ready work. Test that creates P0, P1, P2, P3 issues verifies P0 is selected first.","notes":"Fixed: Added SortPolicy support to VC. Executor now uses SortPolicyPriority for strict priority-based selection. Also exported SortPolicy from Beads library (added to beads.go).","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-25T18:37:26.394105-07:00","updated_at":"2025-10-27T20:22:45.46609-07:00","closed_at":"2025-10-25T20:19:27.196271-07:00"}
{"id":"vc-194","title":"Orphaned git worktrees prevent sandbox creation","description":"When executor crashes or is killed during execution, git worktrees registered in .git/worktrees remain but the directories are deleted. Next run fails with 'already registered worktree' error.","design":"Add worktree cleanup to executor startup: git worktree prune before creating new sandboxes. Also add cleanup to graceful shutdown.","acceptance_criteria":"Executor can create sandboxes even after previous crashes left orphaned worktrees","notes":"Fixed: Added PruneWorktrees() to internal/sandbox/git.go, called on executor startup and graceful shutdown. All tests pass.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-25T21:38:46.930537-07:00","updated_at":"2025-10-27T20:29:10.847032-07:00","closed_at":"2025-10-27T20:29:10.847032-07:00"}
{"id":"vc-205","title":"Validate with dogfooding run","description":"","acceptance_criteria":"VC executor runs end-to-end with Beads storage. Claim/execute/analyze/gates all work.","notes":"Dogfooding run #27 - 2025-10-25 (State transition bug discovered)\n\nDURATION: 15 minutes\nMETHOD: Run executor without AI supervision (ANTHROPIC_API_KEY not set)\nRESULT: ‚ö†Ô∏è Found state machine bug (vc-191)\n\nEXECUTION SUMMARY:\n- Executor claimed and executed 3 issues: vc-26, vc-26-gate-test, vc-8\n- Quality gates ran successfully (build/test/lint)\n- Test gates failed due to API authentication errors (expected - tests need mocks)\n- Executor handled multiple iterations and auto-created blocker issues\n\nBUG DISCOVERED:\nüêõ **vc-191** [P1]: Invalid state transition: executing ‚Üí gates (missing analyzing step)\n- When AI supervision is disabled, executor skips 'analyzing' state\n- Tries to transition executing ‚Üí gates (invalid)\n- Valid path should be: executing ‚Üí analyzing ‚Üí gates\n- Impact: Warning logged but execution continues successfully\n- Fix needed: Either allow the transition or insert synthetic analyzing state\n\nKNOWN ISSUES (not filed, already tracked):\n- vc-125: Watchdog false positives (90+ stuck_state anomalies during normal execution)\n- Test failures due to real API calls with invalid API key (tests should use mocks)\n\nPOSITIVE FINDINGS:\n‚úÖ Beads storage integration working correctly\n‚úÖ Issue claiming works atomically\n‚úÖ Quality gates execute successfully\n‚úÖ Auto-creation of blocker issues for gate failures\n‚úÖ Sandbox creation and cleanup\n‚úÖ Multiple issue execution in single run\n‚úÖ Event logging and activity feed\n\nMETRICS:\n- Issues executed: 3 (vc-26, vc-26-gate-test, vc-8)\n- Bugs found: 1 new (vc-191)\n- Execution time: ~15 minutes\n- Quality gate success: build ‚úÖ, test ‚ùå (expected), lint ‚úÖ","status":"in_progress","priority":1,"issue_type":"task","created_at":"2025-10-27T20:22:45.4583-07:00","updated_at":"2025-10-27T20:22:45.4583-07:00"}
{"id":"vc-44","title":"Validate with dogfooding run","description":"","acceptance_criteria":"VC executor runs end-to-end with Beads storage. Claim/execute/analyze/gates all work.","notes":"Dogfooding run #27 - 2025-10-25 (State transition bug discovered)\n\nDURATION: 15 minutes\nMETHOD: Run executor without AI supervision (ANTHROPIC_API_KEY not set)\nRESULT: ‚ö†Ô∏è Found state machine bug (vc-191)\n\nEXECUTION SUMMARY:\n- Executor claimed and executed 3 issues: vc-26, vc-26-gate-test, vc-8\n- Quality gates ran successfully (build/test/lint)\n- Test gates failed due to API authentication errors (expected - tests need mocks)\n- Executor handled multiple iterations and auto-created blocker issues\n\nBUG DISCOVERED:\nüêõ **vc-191** [P1]: Invalid state transition: executing ‚Üí gates (missing analyzing step)\n- When AI supervision is disabled, executor skips 'analyzing' state\n- Tries to transition executing ‚Üí gates (invalid)\n- Valid path should be: executing ‚Üí analyzing ‚Üí gates\n- Impact: Warning logged but execution continues successfully\n- Fix needed: Either allow the transition or insert synthetic analyzing state\n\nKNOWN ISSUES (not filed, already tracked):\n- vc-125: Watchdog false positives (90+ stuck_state anomalies during normal execution)\n- Test failures due to real API calls with invalid API key (tests should use mocks)\n\nPOSITIVE FINDINGS:\n‚úÖ Beads storage integration working correctly\n‚úÖ Issue claiming works atomically\n‚úÖ Quality gates execute successfully\n‚úÖ Auto-creation of blocker issues for gate failures\n‚úÖ Sandbox creation and cleanup\n‚úÖ Multiple issue execution in single run\n‚úÖ Event logging and activity feed\n\nMETRICS:\n- Issues executed: 3 (vc-26, vc-26-gate-test, vc-8)\n- Bugs found: 1 new (vc-191)\n- Execution time: ~15 minutes\n- Quality gate success: build ‚úÖ, test ‚ùå (expected), lint ‚úÖ","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-22T19:41:21.347848-07:00","updated_at":"2025-10-27T20:22:32.408736-07:00","dependencies":[{"issue_id":"vc-44","depends_on_id":"vc-37","type":"parent-child","created_at":"2025-10-23T22:26:53.702922-07:00","created_by":"import"},{"issue_id":"vc-44","depends_on_id":"vc-43","type":"blocks","created_at":"2025-10-23T22:26:53.703206-07:00","created_by":"import"},{"issue_id":"vc-44","depends_on_id":"vc-101","type":"blocks","created_at":"2025-10-23T22:26:53.70349-07:00","created_by":"import"},{"issue_id":"vc-44","depends_on_id":"vc-100","type":"blocks","created_at":"2025-10-23T22:26:53.703774-07:00","created_by":"import"},{"issue_id":"vc-44","depends_on_id":"vc-102","type":"blocks","created_at":"2025-10-23T22:26:53.704053-07:00","created_by":"import"}]}
{"id":"vc-64","title":"Production rollout strategy and monitoring for Beads migration","description":"Complete the production rollout of Beads library migration with phased deployment, monitoring, and rollback capability. Phased Rollout: Week 1 CI/testing, Week 2 dogfood (vc-205), Week 3 canary 50%, Week 4 full 100%, Week 5 cleanup (vc-45). Monitoring: error rates, query performance, issue CRUD latency, executor claim performance. Safety: VC_FORCE_SQLITE=true escape hatch, automated rollback on error spike, database backups, gradual traffic shifting. Success Metrics: zero data loss, \u003c5% latency increase, stable error rates, LOC reduction.","design":"Use feature flags (VC_BEADS_ROLLOUT_PERCENTAGE) for gradual rollout. Add circuit breaker for automatic rollback. Collect metrics: beads_operation_duration_ms, beads_operation_errors_total. Create runbook for rollout/rollback procedures. Escape hatches: VC_FORCE_SQLITE, VC_FORCE_BEADS, VC_BEADS_ROLLOUT_PERCENTAGE (0-100).","acceptance_criteria":"Rollout completes across all phases. Zero production incidents. Performance meets/exceeds SQLite. Monitoring dashboards healthy. Rollback tested and documented. Runbook created and reviewed.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T21:37:21.131796-07:00","updated_at":"2025-10-27T20:22:45.468446-07:00","dependencies":[{"issue_id":"vc-64","depends_on_id":"vc-37","type":"blocks","created_at":"2025-10-23T22:26:53.711043-07:00","created_by":"import"},{"issue_id":"vc-64","depends_on_id":"vc-43","type":"blocks","created_at":"2025-10-23T22:26:53.711386-07:00","created_by":"import"},{"issue_id":"vc-64","depends_on_id":"vc-44","type":"blocks","created_at":"2025-10-23T22:26:53.711707-07:00","created_by":"import"}]}
