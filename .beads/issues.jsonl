{"id":"vc-196","title":"Implement pre-flight quality gates to prevent work on broken baseline","description":"","design":"Pre-Flight Quality Gates: Run gates BEFORE claiming work to verify baseline is clean. Cache results by git commit hash for performance (5 min TTL). Key innovation: Baseline cache keyed by commit hash means near-instant pre-flight for unchanged code. Phase 1: Basic caching. Phase 2: Baseline comparison (only NEW failures block). Phase 3: Sandbox reuse. See internal/executor/preflight.go for implementation.","acceptance_criteria":"Phase 1 MVP: PreFlightChecker with commit-based caching, degraded mode on pre-flight failure, database table vc_gate_baselines, cache hit rate \u003e90%, events logged, env var config, tests","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-27T19:30:28.052464-07:00","updated_at":"2025-10-27T19:30:28.052464-07:00"}
{"id":"vc-197","title":"Design: PreFlightChecker component with baseline cache","description":"","design":"Implement PreFlightChecker struct with commit-hash-keyed cache. Must support: Get/Set baseline by commit hash, TTL expiration (5 min), database persistence (vc_gate_baselines table), in-memory cache for speed. Cache key: git commit hash. Value: GateBaseline (timestamp, commit_hash, results map, all_passed bool). Cache invalidation: git commit changes, TTL expires, manual clear.","acceptance_criteria":"PreFlightChecker implemented, baseline cache works (in-memory + DB), cache keyed by commit hash, TTL working, unit tests","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T19:30:42.398436-07:00","updated_at":"2025-10-27T19:30:42.398436-07:00","dependencies":[{"issue_id":"vc-197","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:30:53.53805-07:00","created_by":"stevey"}]}
{"id":"vc-198","title":"Database schema: vc_gate_baselines table","description":"","design":"Add vc_gate_baselines table to store baseline cache persistently. Schema: commit_hash TEXT PRIMARY KEY, branch_name TEXT, timestamp DATETIME, all_passed BOOLEAN, results_json TEXT (JSON map of gate results), sandbox_path TEXT (optional, for Phase 3). Indexes: timestamp (for cleanup), branch_name (for filtering). Add migration to wrapper.go or new migration file.","acceptance_criteria":"Table created, indexes added, storage methods (GetBaseline, SetBaseline, InvalidateBaseline), integration test","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T19:31:06.620955-07:00","updated_at":"2025-10-27T19:31:06.620955-07:00","dependencies":[{"issue_id":"vc-198","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:31:17.123561-07:00","created_by":"stevey"}]}
{"id":"vc-199","title":"Executor poll loop: Add pre-flight check before claiming work","description":"","design":"Modify executor poll loop to check pre-flight before claiming. Flow: 1) GetReadyWork finds work, 2) RunPreFlight checks baseline (cache lookup or fresh run), 3) If pass: store baseline, claim work, execute. 4) If fail: enter degraded mode, don't claim. Requires: PreFlightChecker integrated, baseline cached by commit hash, degraded mode handler.","acceptance_criteria":"Poll loop calls pre-flight, work only claimed if pre-flight passes, degraded mode triggered on failure, integration test","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T19:31:31.076388-07:00","updated_at":"2025-10-27T19:31:31.076388-07:00","dependencies":[{"issue_id":"vc-199","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:31:42.180309-07:00","created_by":"stevey"},{"issue_id":"vc-199","depends_on_id":"vc-197","type":"blocks","created_at":"2025-10-27T19:31:47.261661-07:00","created_by":"stevey"},{"issue_id":"vc-199","depends_on_id":"vc-198","type":"blocks","created_at":"2025-10-27T19:31:52.335604-07:00","created_by":"stevey"},{"issue_id":"vc-199","depends_on_id":"vc-200","type":"blocks","created_at":"2025-10-27T19:32:22.600828-07:00","created_by":"stevey"}]}
{"id":"vc-200","title":"Degraded mode: Handle baseline failures","description":"","design":"Implement executor degraded mode when pre-flight fails. Actions: 1) Create system-level blocking issues for each failing gate (vc-baseline-test, vc-baseline-lint, etc), 2) Log degraded mode event, 3) Don't claim work until baseline clean, 4) Continue polling. Events: executor_degraded_mode (timestamp, commit_hash, failing_gates). Future: Add alerts (Slack/email).","acceptance_criteria":"Degraded mode handler implemented, system issues created on failure, event logged, executor continues polling, integration test","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T19:32:07.142516-07:00","updated_at":"2025-10-27T19:32:07.142516-07:00","dependencies":[{"issue_id":"vc-200","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:32:17.517516-07:00","created_by":"stevey"}]}
{"id":"vc-201","title":"Configuration and events for pre-flight","description":"","design":"Add configuration env vars: VC_PREFLIGHT_ENABLED (bool, default true), VC_PREFLIGHT_CACHE_TTL (duration, default 5m), VC_PREFLIGHT_FAILURE_MODE (block/warn/ignore, default block). Add events: pre_flight_check_started, pre_flight_check_completed (cached/fresh, success/failure), baseline_cache_hit, baseline_cache_miss. Event data includes commit_hash, cache_age, gate_results.","acceptance_criteria":"Config struct, env parsing, validation, event types defined, events emitted, tests","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-27T19:32:35.689673-07:00","updated_at":"2025-10-27T19:32:35.689673-07:00","dependencies":[{"issue_id":"vc-201","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:32:46.545938-07:00","created_by":"stevey"}]}
{"id":"vc-202","title":"Documentation: PREFLIGHT.md explaining cache strategy","description":"","design":"Create PREFLIGHT.md explaining: 1) Why pre-flight gates exist, 2) How commit-based caching works, 3) Cache invalidation rules, 4) Performance characteristics (cache hit/miss), 5) Configuration options, 6) Troubleshooting degraded mode, 7) Future phases (baseline comparison, sandbox reuse). Include examples and diagrams.","acceptance_criteria":"PREFLIGHT.md created, explains architecture, examples provided, reviewed","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-27T19:32:59.537712-07:00","updated_at":"2025-10-27T19:32:59.537712-07:00","dependencies":[{"issue_id":"vc-202","depends_on_id":"vc-196","type":"parent-child","created_at":"2025-10-27T19:33:10.180315-07:00","created_by":"stevey"}]}
