{"id":"vc-237","title":"Optimize IsEpicComplete() to use single JOIN query","description":"IsEpicComplete() currently has N+1 query problem. For each child and blocker, it calls GetIssue() individually. This scales poorly for large epics.\n\nCURRENT: Epic with 20 children = 20+ queries\nOPTIMIZED: Single JOIN query = 1 query\n\nExample epic with 5 children:\n- Current: 1 deps query + 5 GetIssue calls = 6 queries\n- Optimized: 1 JOIN query = 1 query\n\nImpact: ~10x performance improvement for large epics","design":"Replace the child/blocker loops with single SQL queries:\n\nChildren check:\nSELECT COUNT(*) as open_children\nFROM dependencies d\nJOIN issues i ON d.issue_id = i.id\nWHERE d.depends_on_id = ? \n  AND d.type = 'parent-child' \n  AND i.status NOT IN ('closed', 'deferred')\n\nBlockers check:\nSELECT COUNT(*) as open_blockers\nFROM dependencies d\nJOIN issues i ON d.depends_on_id = i.id\nWHERE d.issue_id = ? \n  AND d.type = 'blocks' \n  AND i.status != 'closed'\n\nReturn true if both counts are 0.\n\nAlso fixes missing 'deferred' status handling.","acceptance_criteria":"\n- IsEpicComplete uses single JOIN query for children\n- IsEpicComplete uses single JOIN query for blockers\n- Handles 'deferred' status as terminal state\n- Tests verify 100-child epic performance\n- Benchmark shows \u003e5x improvement\n- All existing tests still pass","notes":"Completed: Optimized IsEpicComplete() to use JOIN queries instead of N+1 loops. Epic with 20 children now uses 2 queries instead of 20+.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T21:54:30.923639-07:00","updated_at":"2025-10-29T13:04:42.707642-07:00","closed_at":"2025-10-29T13:04:42.707642-07:00","dependencies":[{"issue_id":"vc-237","depends_on_id":"vc-240","type":"parent-child","created_at":"2025-10-28T21:55:35.322332-07:00","created_by":"stevey"}]}
{"id":"vc-238","title":"Optimize GetMissionForTask() to use recursive CTE query","description":"GetMissionForTask() walks dependency tree iteratively with N queries. For 3-level hierarchy (task → phase → mission), makes 6+ queries.\n\nCURRENT: 3-level hierarchy = ~6 queries (3 GetIssue + 3 dependency queries)\nOPTIMIZED: Single recursive CTE = 1 query\n\nAlso has redundant query issue: calls GetMission() which internally calls GetIssue() again for same mission ID.\n\nImpact: ~6x performance improvement for nested hierarchies","design":"Use recursive CTE to walk parent-child dependencies in single query:\n\nWITH RECURSIVE parent_chain AS (\n  -- Base: start with the task\n  SELECT d.issue_id, d.depends_on_id, 1 as depth\n  FROM dependencies d\n  WHERE d.issue_id = ? AND d.type = 'parent-child'\n  \n  UNION ALL\n  \n  -- Recursive: walk up parents\n  SELECT d.issue_id, d.depends_on_id, p.depth + 1\n  FROM dependencies d\n  JOIN parent_chain p ON d.issue_id = p.depends_on_id\n  WHERE d.type = 'parent-child' AND p.depth \u003c 10  -- Prevent infinite loops\n)\nSELECT i.*, m.sandbox_path, m.branch_name\nFROM issues i\nJOIN parent_chain p ON i.id = p.depends_on_id\nLEFT JOIN vc_mission_state m ON i.id = m.issue_id\nWHERE i.type = 'epic' AND i.subtype = 'mission'\nORDER BY p.depth DESC\nLIMIT 1\n\nThis returns mission + metadata in one query, eliminating both N+1 problems.","acceptance_criteria":"\n- GetMissionForTask uses single recursive CTE query\n- Returns mission context in one database round-trip\n- Handles up to 10-level hierarchies (with depth limit)\n- Circular dependency protection via depth limit\n- Tests verify 5-level hierarchy performance\n- Benchmark shows \u003e5x improvement\n- All existing tests still pass","notes":"Completed: Optimized GetMissionForTask() to use recursive CTE. 3-level hierarchy now uses 1 query instead of 6+.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T21:54:50.370578-07:00","updated_at":"2025-10-29T13:05:00.936097-07:00","closed_at":"2025-10-29T13:05:00.936097-07:00","dependencies":[{"issue_id":"vc-238","depends_on_id":"vc-240","type":"parent-child","created_at":"2025-10-28T21:55:40.408315-07:00","created_by":"stevey"}]}
{"id":"vc-239","title":"Batch-load labels in GetReadyWork enrichment","description":"enrichWithMissionContext() calls GetLabels() once per unique mission to check for needs-quality-gates label. While mitigated by caching, could be batched.\n\nCURRENT: 3 unique missions in ready work = 3 GetLabels queries\nOPTIMIZED: Batch load all labels = 1 query\n\nImpact: Minor improvement (already cached), but eliminates per-mission queries","design":"Before the main loop, collect all unique mission IDs and batch-load their labels:\n\n-- Single query to get all labels for all missions\nSELECT issue_id, label\nFROM labels\nWHERE issue_id IN (?, ?, ?)\n\nBuild map[missionID][]string from results, then check in-memory.\n\nThis eliminates the GetLabels() call in the loop entirely.","acceptance_criteria":"\n- enrichWithMissionContext batch-loads all mission labels upfront\n- Single SQL query for all missions' labels\n- Tests verify correctness with 10+ missions\n- Benchmark shows 2-3x improvement for multi-mission scenarios\n- All existing tests still pass","notes":"Completed: Optimized enrichWithMissionContext() to batch-load labels. 3 unique missions now use 1 query instead of 3.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-28T21:55:06.992288-07:00","updated_at":"2025-10-29T13:05:21.445485-07:00","closed_at":"2025-10-29T13:05:21.445485-07:00","dependencies":[{"issue_id":"vc-239","depends_on_id":"vc-240","type":"parent-child","created_at":"2025-10-28T21:55:45.48687-07:00","created_by":"stevey"}]}
{"id":"vc-240","title":"Epic Storage Query Performance Optimization","description":"The epic-centric infrastructure (vc-216) works correctly but has N+1 query problems that impact performance at scale.\n\nCURRENT PERFORMANCE:\n- 10 ready tasks from 3 missions = ~45 queries\n- 20-child epic completion check = ~22 queries\n- 3-level hierarchy lookup = ~6 queries\n\nTARGET PERFORMANCE:\n- 10 ready tasks from 3 missions = ~6 queries (7x improvement)\n- 20-child epic completion check = 2 queries (10x improvement)  \n- 3-level hierarchy lookup = 1 query (6x improvement)\n\nRoot causes:\n1. IsEpicComplete loops calling GetIssue per child/blocker\n2. GetMissionForTask walks tree with iterative queries\n3. GetLabels called per-mission (minor, already cached)\n\nThese were discovered during code review of vc-232, vc-233, vc-234.","acceptance_criteria":"\n- IsEpicComplete optimized to JOIN queries\n- GetMissionForTask optimized to recursive CTE\n- Labels batch-loaded in enrichment\n- Benchmarks show 5-10x improvement\n- All tests pass with optimized queries\n- No behavior changes, only performance","notes":"All child tasks completed successfully. Storage layer optimizations implemented and tested.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-28T21:55:23.451989-07:00","updated_at":"2025-10-29T13:05:51.465063-07:00","closed_at":"2025-10-29T13:05:51.465063-07:00"}
