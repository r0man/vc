{"id":"vc-209","title":"PREFLIGHT.md is documentation debt - convert to tracked issues","description":"PROBLEM: Created 598-line PREFLIGHT.md describing how preflight SHOULD work. This is documentation debt - it will go stale, contradict reality, and become useless. This is exactly why we invented Beads.\n\nULTRATHINK ANALYSIS:\n\nWhat PREFLIGHT.md describes:\n1. Self-healing executor (can fix baseline failures) - NOT IMPLEMENTED (vc-208 bug blocks this)\n2. Phase 2: Baseline comparison (only NEW failures block) - NOT IMPLEMENTED\n3. Phase 3: Sandbox reuse - NOT IMPLEMENTED\n4. Auto-recovery workflows - PARTIALLY IMPLEMENTED\n5. Configuration tuning - BASIC ONLY\n6. Troubleshooting guides - DOCUMENTATION ONLY\n\nWhat VibeCoder NEEDS to be 'engineer in a box':\n1. Self-healing: Fix own baseline failures without human\n2. Self-troubleshooting: Diagnose and fix flaky tests, gate issues\n3. Self-tuning: Adjust cache TTL based on hit rate metrics\n4. Self-managing: Handle git issues, merge conflicts, stale branches\n5. Self-recovering: Auto-restart after crashes, resume interrupted work\n6. Self-monitoring: Track and fix performance degradation\n7. Self-improving: Learn from failures, adjust gates, improve prompts\n\nWhat needs to happen:\n1. Break PREFLIGHT.md into discrete issues in Beads\n2. Each feature becomes tracked work with acceptance criteria\n3. Delete or minimize PREFLIGHT.md (keep only high-level overview)\n4. Make features discoverable through 'bd show' not markdown files\n5. Ensure all design/acceptance in Beads, not docs\n\nOUTCOME: VibeCoder can handle EVERYTHING a coding agent can handle, with opinionated controls, AI supervision, and self-sufficiency. Human only involved when truly necessary.","design":"APPROACH:\n\nPhase 1: Audit and Break Down (THIS EPIC)\n- Read PREFLIGHT.md line by line\n- Extract every feature/capability described\n- Create child issues for each capability\n- Tag with labels: implemented, partial, future, doc-only\n- Add dependencies between issues\n- Delete redundant documentation from PREFLIGHT.md\n\nPhase 2: Implement Self-Healing (Priority)\n- Fix vc-208: Executor claims baseline issues\n- Add troubleshooting prompts to AI supervisor\n- Enable executor to fix common baseline failures:\n  * Flaky tests (retry, investigate, fix)\n  * Lint errors (auto-format, fix obvious issues)\n  * Build errors (missing deps, version conflicts)\n- Add feedback loop: baseline failure → analysis → fix → commit\n\nPhase 3: Self-Management Features\n- Auto-tune cache TTL based on metrics\n- Handle git issues (merge conflicts, rebases)\n- Manage stale branches and commits\n- Clean up orphaned sandboxes\n- Monitor and fix performance issues\n\nPhase 4: Documentation Reduction\n- Reduce PREFLIGHT.md to 50 lines (overview + link to bd issues)\n- Move all design to issue descriptions\n- Move all acceptance criteria to issues\n- Move all examples to tests\n- Make Beads the source of truth\n\nANTI-PATTERNS TO AVOID:\n❌ Sprawling markdown docs that go stale\n❌ Features described in docs but not implemented\n❌ Documentation living outside issue tracker\n❌ Humans needed for things AI can handle\n❌ Executor stopping when it should self-heal\n\nPRINCIPLES:\n✅ All work tracked in Beads\n✅ All design in issue descriptions\n✅ All acceptance in issues\n✅ Executor is self-sufficient\n✅ AI supervision ensures quality\n✅ Human involved only when necessary","acceptance_criteria":"- PREFLIGHT.md reduced to \u003c100 lines (overview only)\n- All features extracted as child issues in Beads\n- Each issue has: description, design, acceptance, labels, dependencies\n- Dependencies between issues explicit\n- Implementation status clear (done/partial/future)\n- VibeCoder can self-heal baseline failures (vc-208 fixed)\n- VibeCoder can troubleshoot common issues without human\n- Documentation debt eliminated\n- Beads is source of truth for all preflight features","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-28T14:35:41.556652-07:00","updated_at":"2025-10-28T14:35:41.556652-07:00"}
{"id":"vc-210","title":"Self-healing: AI agent can fix baseline test failures","description":"CURRENT: When baseline test failures occur, vc-baseline-test issue is created but executor can't claim it due to vc-208 bug.\n\nNEEDED: Once vc-208 fixed, AI supervisor needs prompts to actually FIX baseline test failures:\n- Analyze test failure output\n- Identify flaky tests vs real failures\n- For flaky: investigate race conditions, timing issues\n- For real: trace through code, understand root cause\n- Apply fix with clear rationale\n- Verify fix works\n- Commit with explanation\n\nThis is the core of self-healing - can VC fix its own broken tests?","design":"Add AI supervisor prompt templates for test failure analysis:\n\n1. Test Failure Analysis Prompt:\n   - Input: Test output, stack traces, failure patterns\n   - Output: Diagnosis (flaky/real/environmental)\n   - Include common patterns: race conditions, timeouts, mocking issues\n\n2. Test Fix Prompt:\n   - Input: Diagnosis, test code, implementation code\n   - Output: Proposed fix with rationale\n   - Validate: Run test multiple times to verify\n\n3. Commit Message Prompt:\n   - Input: Test name, failure, fix applied\n   - Output: Clear commit message explaining fix\n\nIntegration:\n- AI supervisor invoked during baseline issue execution\n- Special handling for vc-baseline-test issues\n- Feedback loop: fix → verify → commit → preflight check\n\nSuccess metrics:\n- % of baseline test failures fixed without human\n- Time to fix (should be \u003c30 min for simple failures)\n- Fix quality (does it actually solve the problem?)","acceptance_criteria":"- AI supervisor has test failure analysis prompts\n- Can diagnose flaky vs real test failures\n- Can propose and apply fixes for common failure types\n- Fixes are committed with clear explanations\n- Tests pass after fix (verified by preflight)\n- Metrics tracked: auto-fix success rate\n- Integration test: introduce test failure, verify AI fixes it","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-28T14:36:08.456421-07:00","updated_at":"2025-10-28T14:36:08.456421-07:00","dependencies":[{"issue_id":"vc-210","depends_on_id":"vc-208","type":"blocks","created_at":"2025-10-28T14:36:21.001133-07:00","created_by":"stevey"},{"issue_id":"vc-210","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:36:26.112382-07:00","created_by":"stevey"}]}
{"id":"vc-211","title":"Self-healing: AI agent can fix baseline lint failures","description":"Similar to test failures, but for lint errors. Most lint failures are trivial:\n- Missing comments\n- Formatting issues (gofmt, goimports)\n- Unused variables/imports\n- Naming conventions\n- Simple style issues\n\nAI should auto-fix these without human intervention.\n\nHarder lint issues (design smells, complexity) may need human review.","design":"Lint Fix Prompt Strategy:\n\n1. Categorize lint failures:\n   - AUTO-FIX: formatting, imports, unused vars, comments\n   - REVIEW: complexity, design smells, security issues\n\n2. For AUTO-FIX:\n   - Apply standard tools (gofmt, goimports)\n   - Add missing comments (use AI to generate)\n   - Remove unused code\n   - Fix naming (use AI to suggest better names)\n\n3. For REVIEW:\n   - Create separate issue with label 'needs-human-review'\n   - Don't block on these\n   - Document why human review needed\n\nImplementation:\n- Parse golangci-lint output\n- Map each error to category\n- Apply fixes automatically where safe\n- Commit with clear explanation of changes","acceptance_criteria":"- Can categorize lint failures into auto-fix vs review\n- Auto-fixes formatting, imports, unused code\n- Adds missing comments using AI\n- Creates separate issues for complex lint failures\n- Commits with clear explanation\n- Baseline lint gate passes after fix\n- Test: introduce lint errors, verify AI fixes simple ones","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-28T14:36:45.794218-07:00","updated_at":"2025-10-28T14:36:45.794218-07:00","dependencies":[{"issue_id":"vc-211","depends_on_id":"vc-208","type":"blocks","created_at":"2025-10-28T14:36:56.308916-07:00","created_by":"stevey"},{"issue_id":"vc-211","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:37:01.403981-07:00","created_by":"stevey"}]}
{"id":"vc-212","title":"Phase 2: Baseline comparison - only NEW failures block","description":"CURRENT: ALL baseline failures block work (Phase 1).\n\nPHASE 2: Track which failures are pre-existing vs new:\n- Baseline A: test1 ✅ test2 ❌ test3 ✅\n- Commit change → Baseline B\n- Baseline B: test1 ✅ test2 ❌ test3 ❌\n- Result: test3 is NEW → block work, create issue\n- Result: test2 is PRE-EXISTING → don't block (grandfathered)\n\nThis allows work on codebases with known pre-existing issues while preventing NEW breakage.\n\nTRADE-OFF: Relaxes 'no pre-existing excuse' principle. May lead to quality degradation if pre-existing issues never get fixed.","design":"Database Schema:\n- Add baseline_parent_hash to vc_gate_baselines\n- Track failure diff between commits\n\nAlgorithm:\n1. Current baseline fails\n2. Look up parent commit baseline\n3. Diff the failures:\n   - failures_current - failures_parent = NEW failures\n   - NEW failures → create blocking issues\n   - Pre-existing failures → log warning, don't block\n\n4. Issue labels:\n   - new-failure: blocks work\n   - pre-existing-failure: doesn't block, tracked for cleanup\n\nConfiguration:\n- VC_PREFLIGHT_ALLOW_PREEXISTING (default: false for Phase 1)\n- When enabled, switches to Phase 2 behavior\n\nMonitoring:\n- Track: # pre-existing failures over time\n- Alert if pre-existing failures growing (quality degrading)","acceptance_criteria":"- Can diff baseline failures between commits\n- Only NEW failures create blocking issues\n- Pre-existing failures tracked but don't block\n- Configuration to enable/disable Phase 2\n- Metrics: NEW vs pre-existing failure counts\n- Warning if pre-existing failures growing\n- Tests verify: new failure blocks, pre-existing doesn't","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-28T14:37:26.191907-07:00","updated_at":"2025-10-28T14:37:26.191907-07:00","dependencies":[{"issue_id":"vc-212","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:37:51.373396-07:00","created_by":"stevey"}]}
{"id":"vc-213","title":"Reduce PREFLIGHT.md to \u003c100 lines, move content to Beads","description":"CURRENT: PREFLIGHT.md is 598 lines of documentation debt.\n\nTASK: Reduce to minimal overview (\u003c100 lines):\n- What preflight is (2 paragraphs)\n- Link to bd show vc-209 for features\n- Link to bd list --label preflight for all related work\n- Basic quickstart (3 env vars)\n- Link to tests for examples\n\nMOVE TO BEADS:\n- All feature descriptions → issue descriptions\n- All acceptance criteria → issue acceptance\n- All design docs → issue design fields\n- All examples → tests or issue descriptions\n- All FAQs → issue discussions\n\nDELETE:\n- Phase 2/3 documentation (now vc-212, vc-207)\n- Self-healing workflows (now vc-210, vc-211)\n- Troubleshooting guides (now tracked as issues)\n- Configuration details (in code comments + tests)\n- Performance tuning (now vc-213)\n\nRESULT: Beads is source of truth, not markdown.","design":"Steps:\n1. Audit PREFLIGHT.md: what's actually needed?\n2. Extract features to issues (done via vc-209 children)\n3. Rewrite PREFLIGHT.md as minimal overview\n4. Add links to Beads for details\n5. Verify no information loss (everything in Beads)\n\nNew PREFLIGHT.md structure:\n\n\nOld content → Beads mapping:\n- Self-healing docs → vc-210, vc-211\n- Phase 2/3 → vc-212, vc-207  \n- Cache tuning → vc-213\n- Troubleshooting → new issues\n- Examples → tests","acceptance_criteria":"- PREFLIGHT.md is \u003c100 lines\n- Contains only: overview, quickstart, links to Beads\n- All features tracked as issues in Beads\n- All design in issue descriptions\n- All acceptance in issues\n- No information loss\n- 'bd show vc-209' shows all preflight work\n- 'bd list --label preflight' lists all related issues","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T14:37:56.471194-07:00","updated_at":"2025-10-28T14:37:56.471194-07:00","dependencies":[{"issue_id":"vc-213","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:38:08.564394-07:00","created_by":"stevey"}]}
{"id":"vc-214","title":"Auto-tune preflight cache TTL based on metrics","description":"CURRENT: Cache TTL is fixed at 5 minutes (or user-configured).\n\nNEEDED: Auto-tune based on observed behavior:\n- Track cache hit rate\n- Track average time between commits\n- Track gate execution time\n- Adjust TTL to optimize trade-off:\n  * Too short → frequent cache misses, wasted time\n  * Too long → stale results, miss flaky failures\n\nMETRICS:\n- Cache hit rate (goal: \u003e90%)\n- Time saved by caching\n- Staleness incidents (gate passes in cache, fails on re-run)\n- Optimal TTL for this project\n\nINTELLIGENCE: Learn the project's commit cadence and adjust.","design":"Metrics Collection:\n- Track every preflight check:\n  * cache_hit: true/false\n  * time_saved: duration (if hit)\n  * age_of_cache: seconds\n  * commit_hash: string\n  \n- Store in vc_agent_events with type=preflight_metrics\n\nAnalysis (periodic, every hour):\n1. Query last 24h of preflight checks\n2. Calculate:\n   - hit_rate = hits / total\n   - avg_commit_interval = avg time between unique commits\n   - avg_gate_time = avg execution time for cache misses\n   \n3. Optimal TTL:\n   - If hit_rate \u003c 85%: decrease TTL (catching more staleness)\n   - If hit_rate \u003e 95%: increase TTL (room to optimize)\n   - Consider: TTL = 2 * avg_commit_interval (covers typical dev cycle)\n   \n4. Apply new TTL:\n   - Update in-memory config\n   - Log change as event\n   - Notify if dramatic change (TTL doubled/halved)\n\nConfiguration:\n- VC_PREFLIGHT_AUTO_TUNE (default: true)\n- VC_PREFLIGHT_MIN_TTL (default: 2m, safety)\n- VC_PREFLIGHT_MAX_TTL (default: 15m, safety)","acceptance_criteria":"- Tracks cache hit rate per hour\n- Analyzes metrics to compute optimal TTL\n- Adjusts TTL automatically based on project cadence\n- Respects min/max TTL bounds\n- Logs TTL changes as events\n- Configuration to enable/disable auto-tuning\n- Test: simulate commit patterns, verify TTL adjusts\n- Metrics dashboard shows: hit rate, TTL over time","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-28T14:38:33.960439-07:00","updated_at":"2025-10-28T14:38:33.960439-07:00","dependencies":[{"issue_id":"vc-214","depends_on_id":"vc-209","type":"parent-child","created_at":"2025-10-28T14:38:45.40223-07:00","created_by":"stevey"}]}
